package br.com.gerenciadornet.entity;

// Generated 09/02/2010 16:40:06 by Hibernate Tools 3.2.5.Beta

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;
import org.jboss.seam.annotations.security.management.UserPassword;

import br.com.gerenciadornet.util.Util;

/**
 * Cliente generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "cliente")
public class Cliente implements java.io.Serializable {

	private Integer codCliente;
	private String 	nome;
	private String 	nomeFantasiaApelido;
	private String 	cpfCnpj;
	private String 	rgIe;
	private String 	email;
	private Date 	dtNascimento;
	private String 	observacao;
	private Date 	dtCadastro;
	private boolean inExclusao;
	private String 	sexo;
	private boolean tipoPessoa;//PESSOA FÍSICA
	private boolean receberPromocoes;//NÃO RECEBER PROMOCÕES.
	private String 	senha;
	private String 	formaTratamento;
	private Usuario usuario = new Usuario();//Usuario responsavel
	private boolean inAdimplente = true;
	private String 	telefone;
	
	private Grupo 	grupo = new Grupo();
	private Entidade entidade = new Entidade();
	private Integer especialidade;
	private Integer diaCobrancaPagamento;
	
	private Date 	dtUltimaVenda;//Data da utlima venda realizada
	
	//dados do estudante
	private boolean inEstudante = false;
	private String 	nomeResponsavel;
	private Integer grauCurso;
	private String 	matriculaEstudante;
	
	private transient String situacaoFinanceira;	
	private transient String telefoneWhatsapp;

	private Set<Endereco> 	enderecos 	= new HashSet<Endereco>(0);
	private Set<Venda> 		vendas 		= new HashSet<Venda>(0);
	private Set<Anotacao> 	anotacoes 	= new HashSet<Anotacao>(0);

	public Cliente() {
	}

	public Cliente(String nome, boolean inExclusao) {
		this.nome = nome;
		this.inExclusao = inExclusao;
	}

	public Cliente(Integer codCliente, String nome) {
		this.codCliente = codCliente;
		this.nome = nome;
	}

	public Cliente(Integer codCliente, String nome, String nomeGrupo, Boolean inAdimplente, Integer diaCobrancaPagamento) {
		this.codCliente = codCliente;
		this.nome = nome;
		this.grupo.setNomeGrupo(nomeGrupo);
		this.inAdimplente = inAdimplente;
		this.diaCobrancaPagamento = diaCobrancaPagamento; 
	}
	
	public Cliente(String nome, String cpfCnpj, String email,
			Date dtNascimento, String observacao, Date dtCadastro,
			boolean inExclusao, Set<Endereco> enderecos, Set<Venda> vendas) {
		this.nome = nome;
		this.cpfCnpj = cpfCnpj;
		this.email = email;
		this.dtNascimento = dtNascimento;
		this.observacao = observacao;
		this.dtCadastro = dtCadastro;
		this.inExclusao = inExclusao;
		this.enderecos = enderecos;
		this.vendas = vendas;
	}
	
	public Cliente(Integer codCliente, String nome, String telefone, String email,
			Date dtCadastro, Date dtUltimaVenda, String nomeResponsavel) {
		
		this.codCliente = codCliente;
		this.nome = nome;
		this.telefone = telefone;
		this.email = email;
		this.dtCadastro = dtCadastro;
		this.dtUltimaVenda = dtUltimaVenda;
		this.usuario.setNomeUsuario(nomeResponsavel);
		
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "cod_cliente", unique = true, nullable = false)
	public Integer getCodCliente() {
		return this.codCliente;
	}

	public void setCodCliente(Integer codCliente) {
		this.codCliente = codCliente;
	}

	@Column(name = "nome", nullable = false, length = 100)
	@NotNull
	@Length(max = 100)
	public String getNome() {
		return this.nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	@Column(name = "cpf_cnpj", length = 18)
	@Length(max = 18)
	public String getCpfCnpj() {
		return this.cpfCnpj;
	}

	public void setCpfCnpj(String cpfCnpj) {
		this.cpfCnpj = cpfCnpj;
	}

	@Column(name = "email", length = 100)
	@Length(max = 100)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "dt_nascimento", length = 0)
	public Date getDtNascimento() {
		return this.dtNascimento;
	}

	public void setDtNascimento(Date dtNascimento) {
		this.dtNascimento = dtNascimento;
	}

	@Column(name = "observacao", length = 100)
	@Length(max = 100)
	public String getObservacao() {
		return this.observacao;
	}

	public void setObservacao(String observacao) {
		this.observacao = observacao;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "dt_cadastro", length = 0)
	public Date getDtCadastro() {
		return this.dtCadastro;
	}

	public void setDtCadastro(Date dtCadastro) {
		this.dtCadastro = dtCadastro;
	}

	@Column(name = "in_exclusao", nullable = false)
	public boolean isInExclusao() {
		return this.inExclusao;
	}

	public void setInExclusao(boolean inExclusao) {
		this.inExclusao = inExclusao;
	}
	
	@Column(name = "in_adimplente", nullable = false)
	public boolean isInAdimplente() {
		return this.inAdimplente;
	}

	public void setInAdimplente(boolean inAdimplente) {
		this.inAdimplente = inAdimplente;
	}
	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "cliente")
	public Set<Endereco> getEnderecos() {
		return this.enderecos;
	}

	public void setEnderecos(Set<Endereco> enderecos) {
		this.enderecos = enderecos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cliente")
	public Set<Venda> getVendas() {
		return this.vendas;
	}

	public void setVendas(Set<Venda> vendas) {
		this.vendas = vendas;
	}

	@Column(name = "rg_ie", length= 20)
	@Length(max = 20)
	public String getRgIe() {
		return rgIe;
	}

	public void setRgIe(String rgIe) {
		this.rgIe = rgIe;
	}
	
	@Column(name = "sexo", length = 1)
	@Length(max = 1)
	public String getSexo() {
		return sexo;
	}
	
	public void setSexo(String sexo) {
		this.sexo = sexo;
	}

	@Column(name = "tipo_pessoa")
	public boolean getTipoPessoa() {
		return tipoPessoa;
	}

	public void setTipoPessoa(boolean tipoPessoa) {
		this.tipoPessoa = tipoPessoa;
	}

	
	@Column(name = "receber_promocoes")
	public boolean isReceberPromocoes() {
		return this.receberPromocoes;
	}

	public void setReceberPromocoes(boolean receberPromocoes) {
		this.receberPromocoes = receberPromocoes;
	}

	@UserPassword(hash = "md5")
	@Column(name = "senha", length = 100)
	@Length(max = 100)
	public String getSenha() {
		return senha;
	}

	public void setSenha(String senha) {
		this.senha = senha;
	}

	@Column(name = "forma_tratamento", length = 3)
	@Length(max = 3)
	public String getFormaTratamento() {
		return formaTratamento;
	}

	public void setFormaTratamento(String formaTratamento) {
		this.formaTratamento = formaTratamento;
	}
	
	@Column(name = "telefone", length = 20)
	@Length(max = 20)
	public String getTelefone() {
		return this.telefone;
	}

	public void setTelefone(String telefone) {
		this.telefone = telefone;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_usuario", nullable = true)
	public Usuario getUsuario() {
		return this.usuario;
	}
	
	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_grupo", nullable = true)
	public Grupo getGrupo() {
		return grupo;
	}

	public void setGrupo(Grupo grupo) {
		this.grupo = grupo;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_entidade")
	public Entidade getEntidade() {
		return this.entidade;
	}

	public void setEntidade(Entidade entidade) {
		this.entidade = entidade;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cliente")
	@OrderBy("dataAnotacao desc")
	public Set<Anotacao> getAnotacoes() {
		return anotacoes;
	}

	public void setAnotacoes(Set<Anotacao> anotacoes) {
		this.anotacoes = anotacoes;
	}
	
	@Transient
	public String getSituacaoFinanceira()
	{
		return situacaoFinanceira;
	}

	public void setSituacaoFinanceira(String situacaoFinanceira)
	{
		this.situacaoFinanceira = situacaoFinanceira;
	}
	
	@Column(name = "in_estudante")
	public boolean isInEstudante() {
		return inEstudante;
	}

	public void setInEstudante(boolean inEstudante) {
		this.inEstudante = inEstudante;
	}

	@Column(name = "nome_responsavel", length = 100)
	public String getNomeResponsavel() {
		return nomeResponsavel;
	}

	public void setNomeResponsavel(String nomeResponsavel) {
		this.nomeResponsavel = nomeResponsavel;
	}

	@Column(name = "grau_curso")
	public Integer getGrauCurso() {
		return grauCurso;
	}

	public void setGrauCurso(Integer grauCurso) {
		this.grauCurso = grauCurso;
	}

	@Column(name = "matricula_estudante", length = 10)
	public String getMatriculaEstudante() {
		return matriculaEstudante;
	}

	public void setMatriculaEstudante(String matriculaEstudante) {
		this.matriculaEstudante = matriculaEstudante;
	}
	
	@Column(name = "cod_especialidade")
	public Integer getEspecialidade() {
		return especialidade;
	}

	public void setEspecialidade(Integer especialidade) {
		this.especialidade = especialidade;
	}

	@Transient
	public String getNomeGrauCurso() {
		
		if(grauCurso == null ){
			return "";
		} else if(grauCurso.intValue() == 1 ){
			return "Gradução";
			
		}else if(grauCurso.intValue() == 2 ){
			return "Pós-Gradução";
			
		}else if(grauCurso.intValue() == 3 ){
			return "Mestrado";
			
		}else if(grauCurso.intValue() == 4 ){
			return "Doutorado";
			
		}else if(grauCurso.intValue() == 5 ){
			return "Pós-Doutorado";
		}
		
		return "";
	} 
	
	@Transient
	public String getNomeEspecialidade() {
		
		if(especialidade == null ){
			return "";
		} else if(especialidade.intValue() == 1 ){
			return "Clínico Geral";
			
		}else if(especialidade.intValue() == 2 ){
			return "Dentística";
			
		}else if(especialidade.intValue() == 3 ){
			return "Endodontia";
			
		}else if(especialidade.intValue() == 4 ){
			return "Implantodontia";
			
		}else if(especialidade.intValue() == 5 ){
			return "Odontopediatria";
			
		}else if(especialidade.intValue() == 6 ){			
			return "Ortodontia";
			
		}else if(especialidade.intValue() == 7 ){			
			return "Periodontia";
			
		}else if(especialidade.intValue() == 8 ){
			return "Prótese";
			
		}else if(especialidade.intValue() == 9 ){
			return "Cirúrgica";
		}
		
		return "";
	}
	
	@Column(name = "dia_cobranca_pagamento")
	public Integer getDiaCobrancaPagamento() {
		return diaCobrancaPagamento;
	}

	public void setDiaCobrancaPagamento(Integer diaCobrancaPagamento) {
		this.diaCobrancaPagamento = diaCobrancaPagamento;
	}
	
	@Transient
	public Date getDtUltimaVenda() {
		return dtUltimaVenda;
	}

	public void setDtUltimaVenda(Date dtUltimaVenda) {
		this.dtUltimaVenda = dtUltimaVenda;
	}
		
	@Column(name = "nome_fantasia_apelido", length = 100)
	@Length(max = 100)
	public String getNomeFantasiaApelido() {
		return nomeFantasiaApelido;
	}

	public void setNomeFantasiaApelido(String nomeFantasiaApelido) {
		this.nomeFantasiaApelido = nomeFantasiaApelido;
	}

	@Transient
	public String getTelefoneWhatsapp() {
			if(telefone == null)
				return "";
		return "55"+Util.removerMascara(telefone);
	}
}
