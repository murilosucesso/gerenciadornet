package br.com.gerenciadornet.entity;

// Generated 09/02/2010 16:40:06 by Hibernate Tools 3.2.5.Beta

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

import br.com.gerenciadornet.util.Constantes;
import br.com.gerenciadornet.entity.ProdutoPedido;

/**
 * Venda generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "venda")
@PrimaryKeyJoinColumn(name = "cod_venda")
public class Venda implements java.io.Serializable {

	private Integer codVenda;
	private TipoPagamento tipoPagamento = new TipoPagamento();
	private Cliente cliente = new Cliente();
	private Usuario usuario = new Usuario();
	private Usuario usuarioCadastro = new Usuario();
	private Usuario usuarioFinalizador;
	private Date dataInicioVenda;
	private Date dataFimVenda;
	private Date dataCobrancaVenda;
	private String numNotaFiscal;
	private Float descontoTotal = new Float(0);	
	private String obsVenda;
	private Boolean inOrcamento 	= false;
	private Boolean inNfeEmitida	= false;
	private Boolean inTrava		= false;
	private Boolean inTroca		= false;
	private Integer canal;
	private StatusVenda statusVenda 		= new StatusVenda(Constantes.ABERTA);
	private Set<ServicoRealizado> servicoRealizados = new HashSet<ServicoRealizado>(0);
	private Set<ProdutoVendido> produtoVendidos 	= new HashSet<ProdutoVendido>(0);
	private Set<ProdutoPedido> produtoPedidos 	= new HashSet<ProdutoPedido>(0);
	private Set<Acompanhamento> acompanhamentos 	= new HashSet<Acompanhamento>();
	private Set<Recebimento> recebimentos 		= new HashSet<Recebimento>();
	
	private Float valorTotalVenda 	= new Float(0);	
	private Float lucroTotalVenda 	= new Float(0);
	
	//Campos logicos
	private transient Float valorComissaoLucro 	= new Float(0);
	private transient Float valorComissaoVenda 	= new Float(0);
	private transient String situacaoFinanceira;
	
	
	public Venda() {
		
	}

	
	public Venda(Date dataInicioVenda, Date dataFimVenda, StatusVenda statusVenda) {	
		this.dataInicioVenda = dataInicioVenda;
		this.dataFimVenda = dataFimVenda;
		this.statusVenda = statusVenda;
	}
	
	public Venda(Integer codVenda, String descTipoPagamento, String nomeCliente, String nomeUsuario,
			String nomeUsuarioCadastro, Date dataInicioVenda, Date dataFimVenda, String descStatusVenda,
			Float valorTotalVenda, Float lucroTotalVenda) {
		super();
		this.codVenda = codVenda;
		this.tipoPagamento.setDescTipoPagamento(descTipoPagamento);
		this.cliente.setNome(nomeCliente);
		this.usuario.setNomeUsuario(nomeUsuario);
		this.usuarioCadastro.setNomeUsuario(nomeUsuarioCadastro);
		this.dataInicioVenda = dataInicioVenda;
		this.dataFimVenda = dataFimVenda;
		this.statusVenda.setDescStatusVenda(descStatusVenda);
		this.valorTotalVenda = valorTotalVenda;
		this.lucroTotalVenda = lucroTotalVenda;
	}
	
	//adicionado o cod_status
	public Venda(Integer codVenda, String descTipoPagamento, String nomeCliente, String nomeUsuario,
			String nomeUsuarioCadastro, Date dataInicioVenda, Date dataFimVenda, Integer codStatusVenda, 
			String descStatusVenda, Float valorTotalVenda, Float lucroTotalVenda) {
		super();
		this.codVenda = codVenda;
		this.tipoPagamento.setDescTipoPagamento(descTipoPagamento);
		this.cliente.setNome(nomeCliente);
		this.usuario.setNomeUsuario(nomeUsuario);
		this.usuarioCadastro.setNomeUsuario(nomeUsuarioCadastro);
		this.dataInicioVenda = dataInicioVenda;
		this.dataFimVenda = dataFimVenda;
		this.statusVenda.setCodStatusVenda(codStatusVenda);
		this.statusVenda.setDescStatusVenda(descStatusVenda);
		this.valorTotalVenda = valorTotalVenda;
		this.lucroTotalVenda = lucroTotalVenda;
	}


	public Venda(Integer codVenda, TipoPagamento tipoPagamento, Cliente cliente,
			Usuario usuario, Date dataInicioVenda) {
		this.codVenda = codVenda;
		this.tipoPagamento = tipoPagamento;
		this.cliente = cliente;
		this.usuario = usuario;
		this.dataInicioVenda = dataInicioVenda;
	}

	public Venda(Integer codVenda, TipoPagamento tipoPagamento, Cliente cliente,
			Usuario usuario, Date dataInicioVenda, Date dataFimVenda,
			String numNotaFiscal, Float descontoTotal, String obsVenda,
			Boolean inOrcamento, Set<ServicoRealizado> servicoRealizados,
			Set<ProdutoVendido> produtoVendidos) {
		this.codVenda = codVenda;
		this.tipoPagamento = tipoPagamento;
		this.cliente = cliente;
		this.usuario = usuario;
		this.dataInicioVenda = dataInicioVenda;
		this.dataFimVenda = dataFimVenda;
		this.numNotaFiscal = numNotaFiscal;
		this.descontoTotal = descontoTotal;
		this.obsVenda = obsVenda;
		this.inOrcamento = inOrcamento;
		this.servicoRealizados = servicoRealizados;
		this.produtoVendidos = produtoVendidos;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "cod_venda", unique = true, nullable = false)
	public Integer getCodVenda() {
		return this.codVenda;
	}

	public void setCodVenda(Integer codVenda) {
		this.codVenda = codVenda;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_tipo_pagamento", nullable = false)
	@NotNull
	public TipoPagamento getTipoPagamento() {
		return this.tipoPagamento;
	}

	public void setTipoPagamento(TipoPagamento tipoPagamento) {
		this.tipoPagamento = tipoPagamento;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_cliente", nullable = false)
	@NotNull
	public Cliente getCliente() {
		return this.cliente;
	}

	public void setCliente(Cliente cliente) {
		this.cliente = cliente;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_usuario", nullable = false)
	@NotNull
	public Usuario getUsuario() {
		return this.usuario;
	}
	
	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_usuario_finalizador")
	public Usuario getUsuarioFinalizador() {
		return usuarioFinalizador;
	}

	public void setUsuarioCadastro(Usuario usuarioCadastro) {
		this.usuarioCadastro = usuarioCadastro;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_usuario_cadastro")
	public Usuario getUsuarioCadastro() {
		return usuarioCadastro;
	}

	public void setUsuarioFinalizador(Usuario usuarioFinalizador) {
		this.usuarioFinalizador = usuarioFinalizador;
	}


	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "data_inicio_venda", nullable = false, length = 0)
	@NotNull
	public Date getDataInicioVenda() {
		return this.dataInicioVenda;
	}

	public void setDataInicioVenda(Date dataInicioVenda) {
		this.dataInicioVenda = dataInicioVenda;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "data_fim_venda", length = 0)
	public Date getDataFimVenda() {		
		return this.dataFimVenda;
	}

	public void setDataFimVenda(Date dataFimVenda) {
		this.dataFimVenda = dataFimVenda;
	}

	@Column(name = "num_nota_fiscal", length = 45)
	@Length(max = 45)
	public String getNumNotaFiscal() {
		return this.numNotaFiscal;
	}

	public void setNumNotaFiscal(String numNotaFiscal) {
		this.numNotaFiscal = numNotaFiscal;
	}

	@Column(name = "desconto_total", precision = 12, scale = 0)
	public Float getDescontoTotal() {
		return this.descontoTotal;
	}

	public void setDescontoTotal(Float descontoTotal) {
		this.descontoTotal = descontoTotal;
	}

	@Column(name = "obs_venda", length = 200)
	@Length(max = 200)
	public String getObsVenda() {
		return this.obsVenda;
	}

	public void setObsVenda(String obsVenda) {
		this.obsVenda = obsVenda;
	}

	@Column(name = "in_orcamento")
	public Boolean getInOrcamento() {
		return this.inOrcamento;
	}

	public void setInOrcamento(Boolean inOrcamento) {
		this.inOrcamento = inOrcamento;
	}
	
	@Column(name = "in_nfe_emitida")
	public Boolean getInNfeEmitida() {
		return inNfeEmitida;
	}


	public void setInNfeEmitida(Boolean inNfeEmitida) {
		this.inNfeEmitida = inNfeEmitida;
	}
	
	@Column(name = "in_canal")
	public Integer getCanal() {
		return canal;
	}

	public void setCanal(Integer canal) {
		this.canal = canal;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_status_venda", nullable = false)
	@NotNull
	public StatusVenda getStatusVenda() {
		return this.statusVenda;
	}

	public void setStatusVenda(StatusVenda statusVenda) {
		this.statusVenda = statusVenda;
	}

	//@OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "venda")		
	@OneToMany( fetch = FetchType.LAZY, mappedBy = "venda")
	public Set<ServicoRealizado> getServicoRealizados() {
		return this.servicoRealizados;
	}

	public void setServicoRealizados(Set<ServicoRealizado> servicoRealizados) {
		this.servicoRealizados = servicoRealizados;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "venda")
	public Set<ProdutoVendido> getProdutoVendidos() {
		return this.produtoVendidos;
	}

	public void setProdutoVendidos(Set<ProdutoVendido> produtoVendidos) {
		this.produtoVendidos = produtoVendidos;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "venda")
	public Set<ProdutoPedido> getProdutoPedidos() {
		return produtoPedidos;
	}

	public void setProdutoPedidos(Set<ProdutoPedido> produtoPedidos) {
		this.produtoPedidos = produtoPedidos;
	}
	
	@OrderBy("dataAcompanhamento")
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "venda")
	public Set<Acompanhamento> getAcompanhamentos() {
		return this.acompanhamentos;
	}
 
	public void setAcompanhamentos(Set<Acompanhamento> acompanhamentos) {
		this.acompanhamentos = acompanhamentos;
	}
	
	@OrderBy("dataAgendamentoRecebimento")
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "venda")
	public Set<Recebimento> getRecebimentos() {
		return this.recebimentos;
	}
 
	public void setRecebimentos(Set<Recebimento> recebimentos) {
		this.recebimentos = recebimentos;
	}

	//@Transient
	@Column(name = "valor_total_venda", precision = 12, scale = 0)
	public Float getValorTotalVenda() {		
		return valorTotalVenda;
	}

	//@Transient
	@Column(name = "lucro_total_venda", precision = 12, scale = 0)
	public Float getLucroTotalVenda() {		
		return lucroTotalVenda;
	}

	public void setValorTotalVenda(Float valorTotalVenda) {
		this.valorTotalVenda = valorTotalVenda;
	}

	public void setLucroTotalVenda(Float lucroTotalVenda) {
		this.lucroTotalVenda = lucroTotalVenda;
	}
	
	@Column(name = "in_trava")
	public Boolean getInTrava() {
		return inTrava;
	}


	public void setInTrava(Boolean inTrava) {
		this.inTrava = inTrava;
	}

	@Column(name = "in_troca")
	public Boolean getInTroca() {
	    return inTroca;
	}

	public void setInTroca(Boolean novoInTroca) {
	    inTroca = novoInTroca;
	}

	@Transient
	public String getSituacaoFinanceira()
	{
		return situacaoFinanceira;
	}


	public void setSituacaoFinanceira(String situacaoFinanceira)
	{
		this.situacaoFinanceira = situacaoFinanceira;
	}

	@Transient
	public Float getValorComissaoLucro()
	{
		return valorComissaoLucro;
	}


	public void setValorComissaoLucro(Float valorComissaoLucro)
	{
		this.valorComissaoLucro = valorComissaoLucro;
	}

	@Transient
	public Float getValorComissaoVenda()
	{
		return valorComissaoVenda;
	}

	public void setValorComissaoVenda(Float valorComissaoVenda)
	{
		this.valorComissaoVenda = valorComissaoVenda;
	}
	
	@Temporal(TemporalType.DATE)
	@Column(name = "data_cobranca_venda")
	public Date getDataCobrancaVenda() {
		return dataCobrancaVenda;
	}

	public void setDataCobrancaVenda(Date dataCobrancaVenda) {
		this.dataCobrancaVenda = dataCobrancaVenda;
	}
}
